{"name":"Provigen","tagline":"Generates content providers from annotated contract classes.","body":"# ProviGen [![Build Status](https://travis-ci.org/TimotheeJeannin/ProviGen.png?branch=master)](https://travis-ci.org/TimotheeJeannin/ProviGen)\r\n\r\nEasily make a [ContentProvider] from a [ContractClass].    \r\n\r\n## Setup\r\n\r\n* Follow the [installation guide](https://github.com/TimotheeJeannin/ProviGen/wiki/Installation-Guide).\r\n\r\n* Annotate your ContractClass.\r\n\r\n```java\r\npublic interface MyContract extends ProviGenBaseContract {\r\n\r\n\t@Column(Type.INTEGER)\r\n\tpublic static final String MY_INT_COLUMN = \"int\";\r\n\r\n\t@Column(Type.TEXT)\r\n\tpublic static final String MY_STRING_COLUMN = \"string\";\r\n\r\n\t@ContentUri\r\n\tpublic static final Uri CONTENT_URI = Uri.parse(\"content://com.myapp/table_name\");\r\n}\r\n```\r\n\r\n* Extend the ProviGenProvider.\r\n\r\n```java\r\npublic class MyContentProvider extends ProviGenProvider {\r\n\r\n    @Override\r\n    public Class[] contractClasses() {\r\n            return new Class[]{ MyContract.class };\r\n    }\r\n}\r\n```\r\n\r\n* Add your provider in your manifest.\r\n\r\n```xml\r\n<provider\r\n    android:name=\"com.myapp.MyContentProvider\"\r\n    android:authorities=\"com.myapp\" >\r\n</provider>\r\n```\r\n\r\n* You're done.\r\n\r\n## Usage\r\n\r\nYou can make the usual insert, update, delete and query using a [ContentResolver].    \r\nFor example querying a single row boils down to:\r\n```java\r\ngetContentResolver().query(\t\r\n\tUri.withAppendedPath(MyContract.CONTENT_URI, myId),\r\n\tnull, \"\", null, \"\");\r\n```\r\nor \r\n```java\r\ngetContentResolver().query(\r\n\tMyContract.CONTENT_URI, null, \r\n\tMyContract._ID + \" = ? \", new String[]{ myId }, \"\");\r\n```\r\n\r\n## Features\r\n\r\n### Multiple contact classes\r\n\r\nYou can use ProviGen with several [ContractClass]es just by making the `contractClasses` method return an array of contract classes.\r\n```java\r\npublic class MyContentProvider extends ProviGenProvider {\r\n\r\n    @Override\r\n    public Class[] contractClasses() {\r\n            return new Class[]{ FirstContract.class, SecondContract.class };\r\n    }\r\n}\r\n```\r\nBy default, ProviGen will create a table for each contract class.     \r\nThe table name will be the last path segment of the contract's content uri.\r\n\r\n### Notifications and observers\r\n\r\nProviGen fully supports the uri notification mechanism.   \r\nYou can safely use it with [CursorLoader]s and [ContentObserver]s.\r\n\r\n### Initial population and contract upgrades\r\n\r\nProviGen comes with a default implementation of the [SQLiteOpenHelper].\r\nThis default implementation will automatically create the needed tables on the first application launch.\r\n\r\nInitial population and contract upgrades can be done providing your own implementation of the [SQLiteOpenHelper].\r\n```java\r\npublic class MyContentProvider extends ProviGenProvider {\r\n\r\n    @Override\r\n    public Class[] contractClasses() {\r\n        return new Class[]{MyContract.class};\r\n    }\r\n\r\n    @Override\r\n    public SQLiteOpenHelper openHelper(Context context) {\r\n        return new SQLiteOpenHelper(getContext(), \"databaseName\", null, 1) {\r\n            @Override\r\n            public void onCreate(SQLiteDatabase database) {\r\n                // Automatically creates table and needed columns.\r\n                new TableBuilder(MyContract.class).createTable(database);\r\n\r\n                // Do initial population here.\r\n            }\r\n\r\n            @Override\r\n            public void onUpgrade(SQLiteDatabase database, int oldVersion, int newVersion) {\r\n                // Automatically adds new columns.\r\n                TableUpdater.addMissingColumns(database, MyContract.class);\r\n\r\n                // Anything else related to database upgrade should be done here.\r\n            }\r\n        };\r\n    }\r\n}\r\n```\r\n\r\n### Data constraint\r\n\r\nYou can apply a `UNIQUE` or a `NOT_NULL` constraint to a column using the appropriate `TableBuilder` methods.\r\n\r\n```java\r\nnew TableBuilder(MyContract.class)\r\n        .addConstraint(MyContract.MY_INT, Constraint.UNIQUE, OnConflict.ABORT)\r\n        .addConstraint(MyContract.MY_STRING, Constraint.NOT_NULL, OnConflict.IGNORE)\r\n        .createTable(database);\r\n```\r\n\r\n## License\r\n\r\nThis content is released under the MIT License.\r\n\r\n[SQLiteOpenHelper]: https://developer.android.com/reference/android/database/sqlite/SQLiteOpenHelper.html\r\n\r\n[ContentObserver]: https://developer.android.com/reference/android/database/ContentObserver.html\r\n\r\n[CursorLoader]: http://developer.android.com/reference/android/content/CursorLoader.html\r\n\r\n[ContentProvider]: https://developer.android.com/reference/android/content/ContentProvider.html\r\n\r\n[ContractClass]: http://developer.android.com/guide/topics/providers/content-provider-basics.html#ContractClasses\r\n\r\n[ContentResolver]: https://developer.android.com/reference/android/content/ContentResolver.html\r\n","google":"UA-47830197-1","note":"Don't delete this file! It's used internally to help with page regeneration."}